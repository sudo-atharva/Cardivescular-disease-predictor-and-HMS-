import { GenerateDiagnosisReportInput, GenerateDiagnosisReportOutput } from '@/ai/flows/generate-diagnosis-report';

// Mock AI responses for demonstration purposes
const mockDiagnoses = [
  "Based on the vital signs data, the patient shows signs of mild hypertension with elevated blood pressure readings. Recommend lifestyle modifications and follow-up monitoring.",
  "The ECG readings indicate normal sinus rhythm with no significant abnormalities. Patient appears to be in stable condition based on current vitals.",
  "Analysis suggests potential respiratory distress based on irregular breathing patterns. Recommend chest X-ray and pulmonary function tests.",
  "Vital signs are within normal ranges. Patient appears healthy with no immediate concerns requiring medical intervention.",
  "The data indicates possible cardiac stress with elevated heart rate and blood pressure. Recommend stress test and cardiology consultation."
];

export async function generateMockDiagnosisReport(input: GenerateDiagnosisReportInput): Promise<GenerateDiagnosisReportOutput> {
  // Simulate AI processing delay
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // Select a random mock diagnosis
  const randomDiagnosis = mockDiagnoses[Math.floor(Math.random() * mockDiagnoses.length)];
  
  return {
    diagnosisReport: `[MOCK AI RESPONSE] ${randomDiagnosis}\n\nNote: This is a demonstration response. In production, this would be generated by an actual AI model.`
  };
}

export function isMockMode(): boolean {
  // Check if we're in mock mode (no external AI services available)
  const hasGoogleAI = !!process.env.GOOGLE_AI_API_KEY;
  const hasOllama = process.env.AI_PROVIDER === 'ollama' && process.env.OLLAMA_HOST;
  
  return !hasGoogleAI && !hasOllama;
}
